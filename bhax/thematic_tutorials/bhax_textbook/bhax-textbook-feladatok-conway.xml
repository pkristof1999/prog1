<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás forrása:              
        </para>
	<para>
	<link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/Myrmecologist">Hangyaszimulációk (Forrás: Gitlab.com/nbatfai)</link>
        </para>
        <para>
	<link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/MNIST/lvl6.jpg">SMNISTforHumans lvl. 6</link>
        </para>
        <para>
	<link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/MNIST/lvl10.jpg">SMNISTforHumans lvl. 10 (update)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>   
	<para>
	Ezt a feladatot szeretném passzolni azzal a passzolási lehetőségemmel, amelyet az SMNISTforHumans nevezetű alkalmazásban, a 6-os szint elérésével szereztem.
	</para>    
     
    </section>
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/gof.java">Java életjáték</link>
        </para>
        <para>
            <link xlink:href="https://www.algosome.com/articles/conway-game-of-life-2d.html">Forrás: www.algosome.com</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <para>
            (Tutorom <link xlink:href="https://github.com/ratkudani">Ratku Dániel</link>) A Conway-féle sejtautómatát kellett a feladatban elkészíteni. A program egy 2 dimenziós koordinátarendszerben dolgozik, 
            amelyben találhatók az ún. sejtek, amelyek vagy "élő" vagy "halott" (0 v. 1) sejtek. Egy véletlenszerű vagy előre meghatározott állapot
            indítja el az életjátékot, majd több iteráció fut le (ahol minden iteráció meghatároz egy sejtet). Habár egyszerű szabályokkal
            és akár véletlenszerűekkel is le lehet futtatni, mindig egyedi formák és viselkedéstípusok emelkednek ki a rácsból.
        </para>           
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/Sejtautomata">Qt életjáték (Forrás: UDPROG)</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ebben a feladatban az előző feladat megvalósítása volt a dolgunk C++-ban a Qt környezet segítségével. Ez komplexebb megvalósítás,
            mint a java-s megoldás, viszont a működési elve ugyanaz.
        </para>
        <para>
            A játék alapja a cellák és a sejtek, és a sejtautómata csipán pár egyszerű szabály alapján működik: a sejt akkor éli túl a kört,
            ha legalább 2 szomszédja van; ha nincs meg az előző feltétel akkor a sejt elpusztul, de akkor is, ha 3-nál több szomszédja van;
            új sejt jön létre abban a cellában, akkor, ha 3 sejt van ott jelen.
        </para>            
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
            Megoldás forrása:              
        </para>
	<para>
	<link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/BrainB">BrainB Benchmark</link>
	</para>
        <para>
        Tanulságok, tapasztalatok, magyarázat...
        </para>    
	<para>
        A BrainB Benchmark létrejöttének a célja az, hogy felkutassa az e-sport tehetségeket, úgy, hogy az agy kognitív
	képességeit feltérképezi, majd ennek segítségével az egyénenként elért pontszámokkal összehasonlítás végezhető. Maga a program
	a karakterelvesztést figyeli, vagyis ha a játékban elveszítjük a saját karakterünket, akkor mennyi ideig tart, amíg
	megtaláljuk azt, és ha megtaláltuk, akkor mennyi ideig tart az, hogy ismét elveszítsük. Jobb esetben rövidebb ideig tart az, hogy megtaláljuk,
	minthogy elveszítsük a karakterünket. A program továbbá azt is nézi, hogy a karakterelvesztésekhez mekkora b/s képernyőváltások társulnak.
	</para>        
    </section>        

</chapter> 
