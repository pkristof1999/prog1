<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás forrása:              
        </para>
	<para>
	<link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/Myrmecologist">Hangyaszimulációk (Forrás: Gitlab.com/nbatfai)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>   
	<para>
	A program a hangyák feromonokkal történő kommunkiációját szimulálja. A "main" futtatását a következőképp tegyük:
	"./myrmecologist -w 250 -m 150 -n 400 -t 10 -p 5 -f 80 -d 0 -a 255 -i 3 -s 3 -c 22"-el lehet.
	Az "AntThread" egy "QThread" osztályból származtaott osztály, mivel a számításokat a "main thread"-től,
	ami a GUI-t kezeli, el akarjuk különíteni, így nem fagy le az Űrlapunk. Ez a Kolónia végzi a hangyák
	mozgatását, alkalmaztatja a környezetre a hanygák által kibocsátott feromonokat. Ezekenfelül updateli a
	"világot" is, csökkenti a világ feromonszintjét. Emiatt nem mondható tiszta OOP programnak.
	Az AntWin nyílván a világot kezeli, olyan dolgokat ad hozzá a funkcionalitáshoz, mint
	például a világra rács rajzolása, egyes zónák a világon (cell) berajzolása és ezeken felül maga világi tartalom
	megjelenítése. Kezeli a GUI eseményeket is amiket lekövetünk.
	</para>    
     
    </section>
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás forrása:              
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/gof.java">Java életjáték</link>
        </para>
        <para>
            <link xlink:href="https://www.algosome.com/articles/conway-game-of-life-2d.html">Forrás: www.algosome.com</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <para>
            A Conway-féle sejtautómatát kellett a feladatban elkészíteni. A program egy 2 dimenziós koordinátarendszerben dolgozik, 
            amelyben találhatók az ún. sejtek, amelyek vagy "élő" vagy "halott" (0 v. 1) sejtek. Egy véletlenszerű vagy előre meghatározott állapot
            indítja el az életjátékot, majd több iteráció fut le (ahol minden iteráció meghatároz egy sejtet). Habár egyszerű szabályokkal
            és akár véletlenszerűekkel is le lehet futtatni, mindig egyedi formák és viselkedéstípusok emelkednek ki a rácsból.
        </para>           
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/Sejtautomata">Qt életjáték (Forrás: UDPROG)</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ebben a feladatban az előző feladat megvalósítása volt a dolgunk c++-ban a Qt környezet segítségével. Ez komplexebb megvalósítás,
            mint a java-s megoldás, viszont a működési elve ugyanaz.
        </para>            
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
            Megoldás forrása:              
        </para>
	<para>
	<link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/BrainB">BrainB Benchmark</link>
	</para>
        <para>
        Tanulságok, tapasztalatok, magyarázat...
        </para>    
	<para>
	A BrainB Benchmark feladata az e-sport tehetségek felkutatása lenne, úgy, hogy feltérképezi az agy kognitív
	képességeit, és az elért pontszámok alapján össze lehet hasonlítani az egyes egyéneket. Maga a benchmark
	a "karakterelvesztést" teszteli, vagyis ha a játékban elveszítjük a karakterünket, mennyi ideig tart 
	megtalálnunk, és ha megtaláltuk, mennyi ideig tart elveszítenünk. Ideális esetben rövidebb ideig tart megtalálnunk,
	mint elveszteni. A program azt is figyeli, hogy az egyes karakterelvesztésekhez milyen bit/sec képernyő-
	váltások tartoznak.
	</para>        
    </section>        

</chapter> 
