<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/Polártranszformációs%20Algoritmus/polargen.cpp">Első osztályom (Forrás: UDPROG)</link>
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/Polártranszformációs%20Algoritmus">Mappa, ami tartalmazza a Java és a C++ forrásokat is (Forrás: UDPROG)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>  
        <para>
            (Tutorom <link xlink:href="https://github.com/ratkudani">Ratku Dániel</link>) Ebben a programban polártranszformáció segítségével véletlenszerű számokat tudunk kiszámolni. A Java véletlenszerű-szám generátora is ezt használja.
            A polártanszformációs algoritmus két "véletlen" értéket generál. A megadott forrásokat összehasonlítva rájöhetünk, hogy a java kódja egyszerűbb és átláthatóbb.
        </para>
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/BinFa/z.c">LZW (Forrás: UDPROG)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Maga az LZW fa lényege, hogy futás közben egy általunk megadott szöveges dokumentum sorait fogjuk beolvasni, 
            és ezeket az értékeket bináris kóddá alakítjuk, amelyeket egymásba ágyazott for ciklusokkal rendezünk.
            A program természetesen addig olvas, amíg van nem üres sor és úgy építi fel a fát, hogy
            mindig leellenőrzi azt, hogy van-e 1-es vagy 0-ás gyermek, ha nincs akkor létrehozza azt, majd visszaugrik a
            gyökérre. Ellenkező esetben az 1-es és a 0-ás gyermekre lép, és mindaddig lépked a fában, ameddig nem talál
            egy olyan részfát, ahol létre kellene hozni egy új gyermeket. Ezekután visszaugrik a gyökérre.
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/BinFa/z_pre.c">LZW preorder (Forrás: UDPROG)</link>
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/tree/master/Feladatok/BinFa/z_post.c">LZW postorder (Forrás: UDPROG)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
           (Tutorom <link xlink:href="https://github.com/ratkudani">Ratku Dániel</link>) Ez a feladat megegyezik az előző feladattal, különbség a bejárási mintában keresendő.
            Míg az alapnak tekinthető Inorder (amely az előző feladatban is megoldásul szolgált) bejárási formálya a következő: Inorder (Left, Root, Right),
            addig a Posztorderé: Postorder (Left, Right, Root), valaint a Preorderé pedig: Preorder (Root, Left, Right).
            Forrás: <link xlink:href="https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/">https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/</link>
        </para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/BinFa/tag.cpp">Tag a gyökér</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ezzel a megoldással is egy szokványos binfát építünk, viszont itt van egy fontos eltérés az előzőekhez képest, mégpedig itt a csomópont a gyökérbe van
            ágyazva, ennek köszönhetően azt közvetlenül el tudjuk érni, mivel ezzel a csomóbont részévé vált a gyökérnek, viszont ez elvbeli különbséget nem von maga után.
            Mivel a fának az elve megegyezik az előző feladatokkal, így ennek kifejtése megtalálható az előző feladatokban.
        </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/BinFa/mutato.cpp">Mutató a gyökér</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
        Itt a Tree és a Node osztályok el vannak egymástól különítve, ennek köszönhetően a binfa működését úgy tudjuk megoldani,
        hogy a gyökér tagból mutatót készítünk, majd ezt adjuk tovább a csomópontnak, majd így felépítjük a fát az összes új csomóponttal együtt. Különbségnek
        róható fel az eredeti binfához képest az, hogy itt a gyökeret csak mutató segítségével tudjuk elérni.    
        </para>
           
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/BinFa/z3a9.cpp">Mozgató szemantika</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            (Tutorom <link xlink:href="https://github.com/DonatPataki">Pataki Donát</link>)
            A mozgató szemantika/konstruktor azt teszi lehetővé, hogy egy tárgy értékeit áthelyezzük egy másikba. Binfánál lehetséges az, hogy egy kész binfát áthelyezzünk egy másikba,
            viszont az eredeti fájl -amelyből ezt átraktuk- az üresen marad, mivel itt nem másolás, hanem áthelyezés történik. Viszont a másolással szemben
            itt pozitívumnak róható fel az, hogy ez kevesebb erőforrást igényel, mintha készítenénk egy teljes másolatot az egészről.
            Bár a 2011-es kiadású C++ verzió óta van beépített mozgató konstruktor is, annak a működése kifogásolható, ezért működését tudjuk deklarálni is.
            A mozgató konstruktorhoz nagyon hasonlít a mozgató értékadás, ami akkor kerül meghívásra, ha egy tárgy már deklarálva lett, amelynek a későbbiekben szeretnénk értékét egy másikból áthelyezni,
            konstruktornál pedig pedig meghívásra akkor kerül, amikor deklarációnál megadjuk az értékét.
        </para>
    </section>                     

</chapter>                
