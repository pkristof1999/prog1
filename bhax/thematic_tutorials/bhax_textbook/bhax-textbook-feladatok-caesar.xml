<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/matrix.c">Háromszögmátrix</link>
        </para>
        <para>
            <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/img/doublecscs.png?fbclid=IwAR1oSpWNrTkDfGqsJXaXoUR4NgP73gci1ffidazhUu5C3ZjUB5WJWZkuOd0">Kép (Forrás: https://gitlab.com/nbatfai)</link>
        </para>                  
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>      
        <para>
            A program egy olyan négyzetes mátrix (négyzetes mátrix: sorainak és oszlopainak a száma megegyezik) alsó háromszögét számítja ki, 
            melynek a főátló felett kizárólag nulla áll. Maga a forrás lényegében a következő:
            A program a memóriában 40 bájtot foglal le a malloc függvény segítségével, melyet a végén a free függvénnyel fel is fogunk szabadítani, 
            ami azért fontos, mert ha nem állna meg a program, akkor egy idő után betelne a számítógép memóriája. Majd megadjuk az 5 sorból álló alsóháromszögünket és 
            printf segítségével kiíratjuk a számokat.
        </para>      
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/eClean.c">C EXOR titkosító</link>
        </para>
        <para>
            <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/exor/eClean.c">Forrás (SourceForge, UDPROG)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>   
        <para>
            Ez a titkosító program az EXOR-ra, azaz a kizáró vagyra épít. A program lényege, hogy egy felhasználó által megadott 8 karakteres int kulcs segítségével (azért 8, mert a későbbiekben a visszafordító program 8 karakteres kulccsal dolgozik) egy szöveget lekódoljunk, amit majd a későbbiekben ugyanazzal a kóddal dekódolni is tudunk. A program két konstans értékkel dolgozik: a kulcs és a buffer maximális méretével, amit a program elején kell definiálni. A program fő ágában deklaráljuk magát a kulcsot és a buffert, és azokat a változókat, amelyek tárolják a kulcs hosszúságát és a beolvasott bájtok mennyiségét. A továbbiakban pedig rögzítjük a felhasználó által megadott kulcsnak a méretét, ez lesz az első parancssori argumentum is. Majd egy while ciklus segítségével megyünk végig a beolvasott bájtokon és EXOR séma segítségével titkosítjuk őket. Lefuttatni pedig a következővel tudjuk: először is a forrást "gcc eClean.c -o ec"-vel fordítjuk majd a következőkben "./ec "kulcs" <![CDATA[<tisztaszöveg.txt >titkosszöveg.txt]]>".
        </para>   
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/ExorTitkosító.java">Java EXOR titkosító</link>
        </para>
        <para>
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html">Forrás: www.tankonyvtar.hu</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>    
        <para>
            Ez az EXOR törő a fentebb megoldot feladat java-ban megírt megfelelője. Működése elvben és gyakorlatban is megegyezik. Lefordítása pedig a következő: "javac -encoding UTF-8 ExorTitkosító.java" majd futtatása pedig: <![CDATA["java ExorTitkosító "kulcs" < titkosított.txt"]]>.
        </para>        
    </section>        
    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/tClean.c">C EXOR törő</link>
        </para>
        <para>
            <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/exor/tClean.c">Forrás (SourceForge, UDPROG)</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ez a program a fent EXOR-ral lekódolt szöveget kódolja vissza a megfelelő 8 int hosszúságú kulcs segítségével. Ebben a programban is definiáljuk, hogy mennyi konstansokkal dolgozzon. Kezdetnek az első for ciklusnál kiszámoljuk, hogy mennyi az átlagos szóhossz szóközök segítségével, ami azért fontos, hogy könnyebben válassza el a szavakat. Ezután jöhet az EXOR végrehajtása bájtonként. Amíg van karakter a szöveges fájlban, addig fut a program, majd amint elfogynak kiürítjük a buffert is. Majd a for ciklusokkal minden lehetséges kulcsot előállítunk. Lefuttatni pedig a következővel tudjuk: először is a forrást "gcc tClean.c -o tc"-vel fordítjuk majd a következőkben "./tc "kulcs" <![CDATA[<titkosszöveg.txt >tisztaszöveg.txt]]>".
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            Megoldás forrása:               
        </para>
        <para>
             <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/nn.r">Neurális OR, AND és EXOR kapu</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>  
        <para>
            (Tutorom <link xlink:href="https://github.com/DonatPataki">Pataki Donát</link>) A következő programot R nyelven írjuk. A program megnevezése utal az agyunk alkotóelemére, a neuronokra.
            A neurális hálónál "and, "or" és "exor" kapuk vannak beágyazva. Az "and" és az "or" működése a következőképp zajlik, egyébként ezek igen egyszerű elven alapszanak: ̋
            az "and" kapunál ha mindkettő 1 akkor lesz az 1 a végeredmény, "or" kapunál az 1 eredményhez elégséges feltétel, ha csak az egyik 1.
            "Exor"-nál a végeredmény akkor lesz 1, amikor a két változó nem egyezik meg, például 1 és 0.
            Három részre lehet a neurális hálót osztani osztani, mégpedig: az "input layer", ahol adatokat kapja, a "hidden
            layer", melyben fut a program magja és a "varázslat" történik, valamint az "output layer", ahol ha a program nem ütközik hibába, akkor az eredményt kapjuk.
        </para>          
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            Megoldás forrása:               
        </para>
        <para>
            <link xlink:href="https://github.com/pkristof1999/prog1/blob/master/Feladatok/perceptron.hpp">Hiba-visszaterjesztéses perceptron</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>   
        <para>
           (Tutorom <link xlink:href="https://github.com/DonatPataki">Pataki Donát</link>) A perceptron egyfajta algoritmus, amely az emberi agy működésének a modeljét akarja utánozni.
           A neurális hálóhoz hasonlítható, viszont van pár eltérés. Itt is legelőször az "input" van, ahol az adatokat kapja, majd a maga a kód a második szint, melyet
           ha megfelelő a mintavétel, akkor helyes eredményt ad vissza. Azonban a középső értékeknek van súlya, amit  ̋
           akár konstansokkal is kiegészíthetünk. A megkapott súlyokat összeadja, majd amikor ez az összeg megüt egy bizonyos értéket,
           akkor a kód egy másik része aktiválódik, ezután pedig elindul egy lineáris folyamat amely ismétli önmagát egészen addig, amíg meg nem kapja a kívánt választ.
        </para>         
    </section>                                                                              
</chapter>                
