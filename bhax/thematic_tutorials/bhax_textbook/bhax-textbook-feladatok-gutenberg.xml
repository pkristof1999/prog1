<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak (Juhász István - Magas szintű programozási nyelvek 1)</title>
        <para> 
Alapvetően három szintet különböztetünk meg amikor programozási nyelvekről beszélünk: a gépi szintű, az assembly szintű és a magas szintű.
A magas szintű programokat "source code"-nak (forráskódnak) nevezzük, továbbá ezek nyelvtani szabályait szintaktikai, míg értelmezési szabályait szemantikai szabályoknak nevezzük.
Ezeket a forrásokat ún. fordítóprogramokkal tudjuk fordítani, mely lexikális elemzés folyamán gépi nyelvet állít elő, amelyet a futtató szoftver működtet a későbbiekben.
Létezik egy Interpreteres megoldás is, mely nem gépi nyelvre fordít, hanem utasításonként elemzi a és hajtja végre a megadott forrást.
Az összes nyelvnek létezik saját hivatkozási nyelve.</para><para>
Imperatív nyelvnek nevezzük azt, ha egy olyan algoritmusról van szó, amely működteti a processzort, utasításokat hajt végre. A fő cél az eljárás vagy az objektum végrehajtása. Emellett beszélhetünk még deklaratív nyelvekről is, melyek lényegében logikai, funkcionális nyelvek: szemantikai szabályok megírására szolgálnak. Fontos, hogy itt a programozó nem tud közvetlen hozzáférni a memóriához, vagy azzal műveleteket végezni.</para><para>
Az adattípus olyan programozási összetevő, mely lehet érték, vagy akár literál is.
Absztrakt adattípusról beszélünk, ha a reprezentáció és a műveletek implementációja számunkra ismeretlen. Jellemzően három összetevő alkotja: a tartomány (típus, amit felvesz (akár maga a programozó személy is adhat meg típust)), az ehhez tartozó műveletek (amit azon elemeken tud végrehajtani, melyek részét képezik a megadott tartománynak) és a reprezentáció (az értékek megjelenítése).
Az alaptípussal tudunk -habár nem akkora tartománnyal, de megegyező műveletekkel- más típust is leképezni.</para><para>
Az I/O függ az operációs rendszertől és az implementációtol. Ennek a feladata a memóriába küldeni, vagy onnan fogadni az adatokat.
A karakter típus részei a karakterek, melyeknek láncait pedig "string"-nek nevezük.
Az egész típus fixpontos ábrázolású, még a valós típusé lebegő pontos (float point). Ezek a numerikus típusok abból eredően, amilyen műveleteket tudunk velük végrehajtani.
Harmadik ilyen típus a logikai, amelynek elemei a 0 vagy 1 (hamis vagy igaz).
A mutató típus segítségével egy megcímzett terület értékét érhetjük el.
A nevesített konstans három összetevője a név, az érték és a típus.</para><para>
A változó a fentebb említett imperatív nyelvek egyik fő eszköze, melynek négy komponense van: a cím, érték, az attribútumok és maga a változó neve. Többszörös tárhivatkozásról beszélhetünk akkor, ha egy időben két nem megegyező nevű változó azonos cím és értékkomponenssel rendelkezik.</para><para>
Az ún. kifejezések szintaktikai metódusok, ezek egészét a típus és az érték adja, komponensei a hagyományos zárójelek "()", az operátor és az operandus. A logikai operátorral bíró kifejezéseknél nem hajtjuk végre az összes műveletet, akkor, ha a művelet elején el lehet dönteni, hogy mi lesz a végeredmény, például ha a művelet első és második része "vagy"-gyal van összekötve, és tudjuk, hogy az első fele igaz, akkor már nem vizsgáljuk a másik felét, mert a végeredmény biztosan igaz.</para><para>
A forrás lépéseit utasításokkal adhatjuk meg, melyek lehetnek deklarációs vagy végrehajtató típusúak is. Deklarációsnál -a fordító program segítségével- a gépi kód végrehajtható utasításokból jön létre. Utasításra példának a "Ha-különben (if-else)" elágazást tudom felhozni, mely megvizsgál egy feltételt, és ha hamisnak bizonyul, akkor az else ágon halad tovább.</para><para>
Blokk az a programrész, mely egy másik programrész belsejében helyezkedik el, ugyanis ez nem lehet független/különálló. A blokk nem rendelkezhet paraméterrel, de használható ott, ahol végrehajtható utasítás is jelen van.
        </para>
    </section> 
           
           
    <section>
        <title>Programozás bevezetés (Kernighan Ritchie - A C programozási nyelv)</title>
        <para>
            Annak a módja, hogy egy programozási nyelvet elsajátítsunk, nem más mint higy programokat írjunk az adott nyelven. 
            A C nyleg tanulását is kezdjük úgy, mint más nyelvek tanulása esetén, a legegyszerűbb programmal a 
            Hello World magyar változatával. Fordítjuk: cc figyel.c, majd futtatjuk: ./a.out. 
            Mivel a cc-vel fordítottuk ezért egy alapértelmezett kimenetbe megy az a.out-ba. 
            A C programok tetszőleges nevű függvényeket tartalmaznak amelyek a számítási műveleteket határozzák meg. 
            Speciális függvény a main (főprogram) mely minden programban elő kell forduljon. 
            Itt hívjuk meg az előre megírt függvényeket, vagy itt írjuk meg. A program olyan sorrendben végzi el 
            az utasításokat ahogy azok a main-be vannak. A függvény neve után szereplő () az argumentum listát tartalmazza, 
            a {} pedig az utasítás listát (lehetnek üresek is). 
            A printf("Figyelem emberek\n") függvényhívás a kimenetbe írja a Figyelem emberek szöveget, a végére pedig egy sortörést.
            Egysoros kommentet a //-el, többsorosat pedig a /* */ jelek segítségével hozunk létre. Az int az egész, a float a lebegő, char a karakter, 
            stb típusú váltózókat jelöli. Sorok végét ;-vel zárjuk le.
            
        </para>
  
    </section>  
         
         
    <section>
        <title>Programozás (Benedek Zoltán, Levendovszky Tihamér: Szoftverfejlesztés C++ nyelven)</title>
        <para>
            
        </para>
    </section>   
</chapter>                

